$path = "D:\U\S\enucuz.kim\scripts\reset-postgres-password.ps1"
@'
Write-Host "=== PostgreSQL Şifre Resetleme Scripti v2 ===" -ForegroundColor Cyan

function Find-Psql {
  Write-Host ">> psql.exe aranıyor..." -ForegroundColor Yellow
  $cands = @(
    "C:\Program Files\PostgreSQL",
    "C:\Program Files (x86)\PostgreSQL"
  ) | Where-Object { Test-Path $_ }

  foreach ($root in $cands) {
    $hit = Get-ChildItem -Path $root -Recurse -Filter psql.exe -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
    if ($hit) { return $hit }
  }

  # Servisten türet
  Write-Host ">> Program Files altında bulunamadı, servis yolundan türetilecek..." -ForegroundColor Yellow
  $svc = Get-CimInstance Win32_Service | Where-Object { $_.Name -match "postgresql" -and $_.State -eq "Running" } | Select-Object -First 1
  if (-not $svc) { return $null }
  $img = $svc.PathName.Trim('"')
  # Örn: "C:\Program Files\PostgreSQL\16\bin\pg_ctl.exe" runservice -N postgresql-x64-16 -D "C:\Program Files\PostgreSQL\16\data"
  $pgctl = ($img -split '\s')[0].Trim('"')
  $binDir = Split-Path $pgctl -Parent
  $psql = Join-Path $binDir "psql.exe"
  if (Test-Path $psql) { return $psql } else { return $null }
}

# Admin kontrolü (öneri)
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $IsAdmin) {
  Write-Host "Uyarı: Yönetici yetkisi olmadan dosya yazma/servis restart sorunları olabilir." -ForegroundColor Yellow
}

$psql = Find-Psql
if (-not $psql) {
  Write-Host "psql.exe bulunamadı! PostgreSQL client kurulu değil gibi." -ForegroundColor Red
  Write-Host "Çözüm: Resmi PostgreSQL kurulumunda 'Command Line Tools' seçeneğini işaretle veya mevcut kuruluma PATH ekle." -ForegroundColor Red
  exit 1
}
Write-Host "Bulundu: $psql" -ForegroundColor Green

# Çalışan servis ve data klasörü
$svc = Get-CimInstance Win32_Service | Where-Object { $_.Name -match "postgresql" -and $_.State -eq "Running" } | Select-Object -First 1
if (-not $svc) { Write-Host "PostgreSQL servisi çalışmıyor!" -ForegroundColor Red; exit 1 }
Write-Host "Servis: $($svc.Name)  PID: $($svc.ProcessId)" -ForegroundColor Green

# Data klasörü: PathName içindeki -D "...\data"
$dataDir = $null
if ($svc.PathName -match ' -D\s+"([^"]+)"') { $dataDir = $matches[1] }
if (-not $dataDir) { Write-Host "Data klasörü tespit edilemedi (PathName içinde -D yok)." -ForegroundColor Red; exit 1 }
Write-Host "Data klasörü: $dataDir" -ForegroundColor Green

# 1) Bağlantı testi
Write-Host ">> Mevcut şifre ile bağlantı deneniyor..." -ForegroundColor Yellow
& "$psql" -h localhost -p 5432 -U postgres -d postgres -c "SELECT version();" 2>$null
if ($LASTEXITCODE -eq 0) {
  Write-Host "Bağlantı başarılı, şifre değişimine gerek yok." -ForegroundColor Green
  exit 0
}

Write-Host "Şifre hatalı, geçici trust moduna geçiliyor..." -ForegroundColor Magenta

# 2) pg_hba.conf yedeğini al ve trust'a çevir
$pgHba = Join-Path $dataDir "pg_hba.conf"
if (-not (Test-Path $pgHba)) { Write-Host "pg_hba.conf bulunamadı: $pgHba" -ForegroundColor Red; exit 1 }

$backup = "$pgHba.bak_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
Copy-Item $pgHba $backup -Force
Write-Host "Yedek alındı: $backup" -ForegroundColor DarkGray

# 127.0.0.1/32 satırlarında auth metodunu trust yap
$content = Get-Content $pgHba -Raw
# Sadelik: tüm 'scram-sha-256' -> 'trust' (lokal için)
$content2 = $content -replace '(?mi)^\s*host\s+all\s+all\s+127\.0\.0\.1/32\s+\S+', 'host all all 127.0.0.1/32 trust'
# IPv6 local (opsiyonel)
$content2 = $content2 -replace '(?mi)^\s*host\s+all\s+all\s+::1/128\s+\S+', 'host all all ::1/128 trust'
# Yine de bulunamadıysa genel bir replace (son çare)
if ($content2 -eq $content) { $content2 = $content -replace 'scram-sha-256','trust' }

Set-Content -Path $pgHba -Value $content2 -Encoding ascii
Write-Host "pg_hba.conf trust moduna alındı." -ForegroundColor Green

# 3) Servisi restart
Restart-Service -Name $svc.Name -Force
Start-Sleep -Seconds 3

# 4) Şifreyi sıfırla
$newPass = "postgres"
Write-Host "Yeni şifre: $newPass" -ForegroundColor Yellow
& "$psql" -h localhost -U postgres -d postgres -c "ALTER USER postgres WITH PASSWORD '$newPass';"
if ($LASTEXITCODE -ne 0) {
  Write-Host "Şifre sıfırlama komutu başarısız oldu." -ForegroundColor Red
  # Yedeği geri dön
  Copy-Item $backup $pg
